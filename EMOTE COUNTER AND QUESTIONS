#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <time.h>
#include <windows.h>

#define MAX 1000
#define STARTHOUR 0
#define STARTMIN 0
#define STARTSEC 0
#define MAX_LINES 63
#define MAXLINE 500

typedef struct twitchchat{
    char date[MAX];
    int hour;
    int min;
    int sec;
    char username[MAX];
    char text[MAX];
} twitchchat;

typedef struct emotelist {
    char emote[20];
    int emotecount;
} emotelist;

int get_twitch_chat(FILE *chatfile, FILE *emotefile, twitchchat chat[],  emotelist emotes[], clock_t start_t, int amountofemotes);
void timer(int *hour, int *min, int *sec, clock_t start_t, clock_t end_t);
int count_line(FILE *chatfile);
void make_emote_struct(FILE *emotefile, twitchchat chat[], emotelist emotes[], int *amountofemotes);
void emote_counter(twitchchat chat[], emotelist emotes[], int i, int amountofemotes);
void emote_highlight(twitchchat chat[], emotelist emotes[], int i);
int find_questions(twitchchat test[], int n, twitchchat questions[]);
void print_emote_counter(emotelist emotes[], int msg_nr);
int is_highlight();


int main(void){
    twitchchat *chat_line, questions[500];
    emotelist *emotes;
    int numberoflines = 0, msg_nr, amountofemotes = 0, question_nr_curr, question_nr_prev, prev_msg_nr;
    const clock_t start_t = clock();
    FILE *chatfile;
    FILE *emotefile;

    chatfile = fopen("twitchchat2.txt", "r");
    emotefile = fopen("emotes.txt", "r");

  
    if(chatfile != NULL){
        numberoflines = count_line(chatfile);
        chat_line = (twitchchat *)malloc(numberoflines * sizeof(twitchchat));
        emotes = (emotelist *)malloc(20 * sizeof(emotelist));

        make_emote_struct(emotefile, chat_line, emotes, &amountofemotes);

        if(chat_line == NULL){
            printf("Allocation problems. Bye.\n");
            exit(EXIT_FAILURE);
        }
        while(1){
            msg_nr = get_twitch_chat(chatfile, emotefile, chat_line, emotes, start_t, amountofemotes);
            emote_highlight(chat_line, emotes, msg_nr - 1);
            if(msg_nr != prev_msg_nr){
                print_emote_counter(emotes, msg_nr - 1);
                printf("%d\t[%s %d:%d:%d UTC] %s: %s\n", msg_nr - 1, chat_line[msg_nr - 1].date,
                   chat_line[msg_nr - 1].hour,
                   chat_line[msg_nr - 1].min,
                   chat_line[msg_nr - 1].sec,
                   chat_line[msg_nr - 1].username,
                   chat_line[msg_nr - 1].text);    
            }
            prev_msg_nr = msg_nr;

            /*question_nr_curr = find_questions(chat_line, msg_nr, questions);
            if(question_nr_curr != question_nr_prev && question_nr_curr){
                printf("%s\n", questions[question_nr_curr - 1].text);
            }
            question_nr_prev = question_nr_curr;*/
        

        }
        fclose(chatfile);
        fclose(emotefile);
        free(chat_line);
    }
    else{
        printf("Can't open the file %s\n", "twitchchat2.txt");
    }
   
    return 0;
}

int get_twitch_chat(FILE *chatfile, FILE *emotefile, twitchchat chat[], emotelist emotes[], clock_t start_t, int amountofemotes){
    /* emotenumber = what emote to use for highlight in emotes.txt, 0 = Kappa, 3 = LUL */
    static int i = 0, hour = 0, min = 0, sec = 0;
    char line[500],
        dummystr[500];
    static clock_t end_t;
    end_t = clock();
    timer(&hour, &min, &sec, start_t, end_t);

    /*printf("%d:%d:%d  ", hour, min, sec); */
    if(fgets(line, sizeof(line), chatfile) != NULL){
        sscanf(line, " [%s %d:%d:%d UTC] %[^:]: %500[^\n]",
               chat[i].date,
               &chat[i].hour,
               &chat[i].min,
               &chat[i].sec,
               chat[i].username,
               chat[i].text);
        sscanf(line, " %[^\n]", dummystr);
        /* printf("HELLO: %d %d %d\n", chat[i].hour, chat[i].min, chat[i].sec);*/

        if(chat[i].hour == hour && chat[i].min == min && chat[i].sec == sec){
            /*printf("%s: %-4d  ", emotes[2].emote, emotes[2].emotecount);*/
            i++;
        }
        else{
            fseek(chatfile, -(strlen(dummystr) + 2), SEEK_CUR); /* seek backward from the current pos */
        }
        /*printf("%d\n", strlen(dummystr));
        printf("%ld\n", ftell(chatfile));*/
    }

    return i;
}

void timer(int *hour, int *min, int *sec, clock_t start_t, clock_t end_t){
    static int i = 0;
    clock_t total_t;

    if(end_t / CLOCKS_PER_SEC == i){
        end_t = clock();
        total_t = (double)((end_t - start_t) / CLOCKS_PER_SEC) + STARTSEC + STARTMIN * 60 + STARTHOUR * 60 * 60;
        *sec = total_t % 60;
        *min = (total_t / 60) % 60;
        *hour = total_t / 3600;
        i++;
    }
}

int count_line(FILE *chatfile){
    int i = 0;
    char line[MAXLINE];
    while(fgets(line, sizeof(line), chatfile) != NULL){
        i++;
    }
    rewind(chatfile);
    return i;
}

void make_emote_struct(FILE *emotefile, twitchchat chat[], emotelist emotes[], int *amountofemotes){
    int k = 0;
    char line[20];
    while(fgets(line, sizeof(line), emotefile) != NULL){
        sscanf(line, " %20[^\n]", emotes[k].emote);
        emotes[k].emotecount = 1;
        k++;
    }
    *amountofemotes = k;
}

/*void emote_counter(twitchchat chat[], emotelist emotes[], int i, int amountofemotes){
    int j;
    for(j = 0; j < amountofemotes; j++){
        if(strstr(chat[i].text, emotes[j].emote)){  
            emotes[j].emotecount = emotes[j].emotecount + 1;
            printf("%-10s: %-4d", emotes[j].emote, emotes[j].emotecount);
        }
    }
}*/

/* Mathias has copyright on this function Jebaited */
void emote_highlight(twitchchat chat[], emotelist emotes[], int i){
    /* secback = sec you go back to check for emotes */
    /* triggernumber = how many emotes in secback to make highlight */
    int j = 0, k, n = 0, secback = 20, startsec, totalsec, emotefound = 0,
        emotenumber, hour, min, sec, dummy, prev_msg_nr;
    
    totalsec = (chat[i].hour * 3600) + (chat[i].min * 60) + (chat[i].sec);
    startsec = (totalsec - secback) < 0 ? 0 : (totalsec - secback);
 
    hour = startsec / 3600;
    min = (startsec / 60) % 60;
    sec = startsec % 60;

    if(i != prev_msg_nr){
        
        for(j = 0; j < i; j++){
            if((chat[j].hour < hour) || (chat[j].min < min) || (chat[j].sec < sec)){
                n++;
            }
        }
        for(emotenumber = 0; emotenumber < 20; emotenumber++){
            emotefound = 0;
            if(strstr(chat[i].text, emotes[emotenumber].emote)){
                for(k = n; k < i; k++){
                    if(strstr(chat[k].text, emotes[emotenumber].emote)){
                        emotefound = 1;
                    }
                }
                if(!emotefound){
                    emotes[emotenumber].emotecount = 1;
                }
                else{
                    dummy = emotes[emotenumber].emotecount;
                    emotes[emotenumber].emotecount = dummy + 1;
                }
            }
        }
    }
    prev_msg_nr = i;

    is_highlight();

}

void print_emote_counter(emotelist emotes[], int msg_nr){
    int i;
    static int prev_msg_nr;

    if(msg_nr != prev_msg_nr){
        for(i = 0; i < 19; i++){
            if(emotes[i].emotecount > 20){
                printf("%s: %d\t", emotes[i].emote, emotes[i].emotecount);
            }
        }
    }
    prev_msg_nr = msg_nr;

}

int find_questions(twitchchat test[], int n, twitchchat questions[]){
    static int j = 0;
    char curr[MAX];
    static char prev[MAX];
    strcpy(curr, test[n].text);
    if(!(prev == NULL || strcmp(curr, prev) == 0)){
        if(strchr(curr, '?')){
            questions[j] = test[n];
            j++;
        }
    }
    strcpy(prev,test[n].text);

    return j;
}

int is_highlight(){
    return 1;
}
